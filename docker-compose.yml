version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: eleme-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-eleme123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-eleme_db}
      MYSQL_USER: ${MYSQL_USER:-eleme_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-eleme123456}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./elemeSpringBoot/sql:/docker-entrypoint-initdb.d
    networks:
      - eleme-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 5
      start_period: 30s
      interval: 10s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: eleme-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eleme-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      start_period: 10s
      interval: 10s

  # 后端Spring Boot应用
  backend:
    build:
      context: ./elemeSpringBoot
      dockerfile: Dockerfile
    container_name: eleme-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE:-eleme_db}?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:-eleme_user}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:-eleme123456}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      JAVA_OPTS: "-Xmx512m -Xms256m"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eleme-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      timeout: 10s
      retries: 5
      start_period: 60s
      interval: 30s

  # 前端Vue应用
  frontend:
    build:
      context: ./elemeVue
      dockerfile: Dockerfile
    container_name: eleme-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - eleme-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      timeout: 5s
      retries: 3
      start_period: 10s
      interval: 30s

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: eleme-nginx
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - eleme-network
    profiles:
      - production

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: eleme-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - eleme-network
    profiles:
      - monitoring

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: eleme-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - eleme-network
    profiles:
      - monitoring

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  eleme-network:
    driver: bridge 